@model MyHorrorMovieApp.Models.Movie

@{
    ViewData["Title"] = "Create";
}
@{
    string token = ViewData["Token"] as string;
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Movie</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- jQuery -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

</head>


<nav>
    <ul style="list-style: none; padding: 0; margin: 0;">
        <li style="display: inline-block; margin-right: 10px;">
            <form method="post" action="/logout">
                <button type="submit" class="btn btn-primary">Logout</button>
            </form>
        </li>
        <li style="display: inline-block; margin-right: 10px;">
            <a href="/me" style="text-decoration: none;">
                <button class="btn btn-primary">Profile</button>
            </a>
        </li>
        <li style="display: inline-block; margin-right: 10px;">
            <a href="/FriendRequests" style="text-decoration: none;">
                <button class="btn btn-primary">Friend Requests
                    @if (ViewData["PendingRequestsCount"] != null && (int)ViewData["PendingRequestsCount"] > 0)
                    {
                        <span class="badge bg-danger">@(ViewData["PendingRequestsCount"])</span>
                    }
                </button>
            </a>
        </li>
        <a href="/Movies" style="text-decoration: none;">
            <button class="btn btn-primary">Back to Movies</button>
        </a>
    </ul>
</nav>

<h1 style="margin-left: 10px;">Create</h1>
@if ((bool)ViewData["IsAdmin"])
{
    <p style="margin-left: 10px;">Hello, Admin</p>
}


<div class="row justify-content-center">
    <div class="col-md-6">
        <h4 class="text-center">Movie</h4>

        <div class="card border border-light">
            <div class="card-body text-center">
                <div id="errorMessage" class="alert alert-danger d-none" role="alert">
                    <ul id="errorList"></ul>
                </div>

                <form id="createMovieForm" method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group" style="padding-left: 12px;">
                        <label asp-for="Title" class="control-label">Title: </label>
                        <input type="text" name="Title" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>
                    <br />
                    <div class="form-group">
                        <label asp-for="Image" class="control-label">Image: </label>
                        <input type="text" name="Image" />
                        <span asp-validation-for="Image" class="text-danger"></span>
                    </div>
                    <br />
                    <div class="form-group" style="padding-left: 12px;">
                        <label asp-for="Year" class="control-label">Year: </label>
                        <input type="number" name="Year" />
                        <span asp-validation-for="Year" class="text-danger"></span>
                    </div>
                    <br />
                    <div class="form-group" style="padding-left: 15px;">
                        <label asp-for="Plot" class="control-label">Plot: </label>
                        <input type="text" name="Plot" />
                        <span asp-validation-for="Plot" class="text-danger"></span>
                    </div>
                    <br />
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Create</button>
                    </div>
                </form>

            </div>
        </div>

    </div>
</div>
<br />
<div id="movieCarousel" class="carousel slide" data-bs-ride="carousel">
    <div class="carousel-inner">
        @if (ViewData["Movies"] is List<MyHorrorMovieApp.Models.Movie> movies)
        {
            @foreach (var movie in movies)
            {
                <div class="carousel-item @(movie == movies[0] ? "active" : "")">
                    <img src="@movie.Image" class="d-block w-100" style="max-height: 400px; object-fit: contain;"
                        alt="Movie Image">
                </div>
            }
        }
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#movieCarousel" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#movieCarousel" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button>
</div>


<script>
    document.getElementById('createMovieForm').addEventListener('submit', function (event) {
        event.preventDefault();

        const formData = new FormData(this);


        fetch(`/Movies/Create`, {
            method: 'POST',
            body: formData,
            headers: {
                'Accept': 'application/json',
                'Authorization': 'Bearer ' + '@token'
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Movie created successfully:', data);
                if (data.success) {
                    // Redirect to the movies index page
                    window.location.href = `/Movies`;
                } else {
                    console.error('Error creating movie:', data.errors);
                    displayErrorMessage(data.errors);
                }
            })
            .catch(error => {
                console.error('Error creating movie:', error);
                // Optionally handle error here
            });
    });

    function displayErrorMessage(errors) {
        // Get the error message element
        var errorListElement = document.getElementById('errorList');

        // Clear any existing error messages
        errorListElement.innerHTML = '';

        // Iterate over the errors array and create list items for each error message
        errors.forEach(function (error) {
            // Replace the generic "invalid string" error message for the Year property
            if (error.includes("The value '' is invalid.")) {
                error = "The Year field is required.";
            }

            var listItem = document.createElement('li');
            listItem.textContent = error;
            errorListElement.appendChild(listItem);
        });

        // Show the error message element
        var errorMessageElement = document.getElementById('errorMessage');
        errorMessageElement.classList.remove('d-none');
    }


</script>

<style>
    nav {
        margin-left: 10px;
        padding-top: 5px;
    }

    body {
        background-color: black;
        color: white;
    }

    .card {
        background-color: #4d0000;
        color: white;
        margin-left: 10px;
    }

    .carousel-item img {
        max-height: 300px;
        width: auto;
        margin: auto;
    }
</style>