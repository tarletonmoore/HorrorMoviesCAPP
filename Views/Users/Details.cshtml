@model MyHorrorMovieApp.Models.User

@{
    ViewData["Title"] = "Details";
        int currentUserId = (int)ViewData["CurrentUserId"];
            int? profileId = ViewData["ProfileId"] as int?;

bool areFriends = (bool)ViewData["AreFriends"];
string profilePicture = (string)ViewData["ProfilePicture"];
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- jQuery -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

</head>

<div class="container">
    <nav class="mb-4 nav">
        <ul style="list-style: none; padding: 0; margin: 0;">
            <li style="display: inline-block; margin-right: 10px;">
                <form method="post" action="/logout">
                    <button type="submit" class="btn btn-primary">Logout</button>
                </form>
            </li>
             @if(Model.Id != currentUserId){
                 <li style="display: inline-block; margin-right: 10px;">
            <a href="/me" style="text-decoration: none;">
                <button class="btn btn-primary">Profile</button>
            </a>
        </li>
}
        <li style="display: inline-block; margin-right: 10px;">
    <a href="/FriendRequests" style="text-decoration: none;">
        <button class="btn btn-primary">Friend Requests 
            @if (ViewData["PendingRequestsCount"] != null && (int)ViewData["PendingRequestsCount"] > 0)
            {
                <span class="badge bg-danger">@(ViewData["PendingRequestsCount"])</span>
            }
        </button>
    </a>
</li>

            @if ((bool)ViewData["IsAdmin"])
            {
                <li style="display: inline-block; margin-right: 10px;">
                    <a href="/Movies/Create" style="text-decoration: none;">
                        <button class="btn btn-primary">Add Movie</button>
                    </a>
                </li>
            }
            <li style="display: inline-block; margin-right: 10px;">
                <a href="/Movies" style="text-decoration: none;">
                    <button class="btn btn-primary">Back
                        to Movies</button>
                </a>
            </li>
        </ul>
    </nav>

@if (String.IsNullOrEmpty(Model.ProfilePictureUrl))
{
    <img src="https://static.vecteezy.com/system/resources/thumbnails/002/534/006/small/social-media-chatting-online-blank-profile-picture-head-and-body-icon-people-standing-icon-grey-background-free-vector.jpg" alt="blank image">
}
else
{
    <img src="@Model.ProfilePictureUrl" alt="Profile Picture">
}

    <h1>@Model.Username's Profile</h1>
      @if(Model.Id == currentUserId){
          <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                                    data-bs-target="#editModal">
                                    Edit
                                </button>
                                <br/>
    }
         @if(Model.Id != currentUserId){
            @if (areFriends){
<button class="btn btn-primary" onclick="removeFriend(@profileId)">Remove Friend</button>
<br/>
            }
            else{
          <button id="addFriendBtn" class="btn btn-primary" onclick="addFriend(@profileId)">Add Friend</button>
          <br/>
          }
            }
<br/>
<h2>Friends</h2>
@if (Model != null && Model.Friendships.Any())
{
    <ul>
        @foreach (var friendship in Model.Friendships)
        {
            <li>@friendship.Friend.Username</li>
        }
    </ul>
}
else
{
    <p>No friends yet.</p>
}



    <div>
        <hr />
        <div class="row">
            <h2>Favorites</h2>
            @if (Model != null && Model.Favorites.Any())
            {
                @foreach (var favorite in Model.Favorites)
                {
                    <div class="col-md-6">
                        <div class="card border border-light">
                            <div class="card-header border-bottom">
                                <div class="row align-items-center">
                                    @if (favorite.UserId == currentUserId){
                                        <div class="col-auto">
                                            <button class="btn btn-danger" onclick="deleteFavorite(@favorite.Id)">X</button>
                                        </div>
}
                                    <div class="col card-title text-center">
                                        <h4 class="m-0">@favorite.Movie.Title</h4>
                                    </div>
                                </div>

                            </div>

                            <div class="card-body">
                                <div class="image-container" style="height: 400px; overflow: hidden;">
                                    <img src="@favorite.Movie.Image" class="card-img-top img-fluid" alt="@favorite.Movie.Title"
                                        style="object-fit: contain; width: 100%; height: 100%;" />
                                </div>
                                <hr />
                                <h4 class="card-text">Year: @favorite.Movie.Year</h4>
                                @* <hr />
                        <h4 class="card-text">Plot: @favorite.Movie.Plot</h4> *@
                            </div>
                        </div>
                        <br/>
                    </div>
                }
            }
            else
            {
                <p>No favorites yet.</p>
            }





        </div>
    </div>
  

</div>

<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content border border-light">
                        <div class="modal-header">
                            <h5 class="modal-title" id="editModalLabel" style="color: #fff;">Edit Profile</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                                style="background-color: #fff;"></button>
                        </div>
                        <div class="modal-body">
                            <!-- Edit Form -->
                            <form id="editForm">
                                <div class="mb-3">
                                    <label class="form-label" style="color: #fff;">Profile Picture</label>
                                    <input type="text" name="ProfilePictureUrl" class="form-control" id="ProfilePictureUrl"
                                        value="@Model.ProfilePictureUrl">
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" onclick="saveProfileChanges()">Save
                                changes</button>
                        </div>
                    </div>
                </div>
            </div>

<script>
    var token = '@ViewData["Token"]';

$(document).ready(function() {

    $.ajax({
        type: 'GET',
        url: '/FriendRequests/HasPendingFriendRequest',
        data: {
            profileId: @profileId
        },
        success: function (response) {
            if (response.hasPendingRequest) {
                // There's a pending friend request, display the "Pending" button
                $('#addFriendBtn').text('Pending');
                $('#addFriendBtn').prop('disabled', true); // Disable the button
            } else {
                // No pending friend request, display the "Add Friend" button
                $('#addFriendBtn').text('Add Friend');
                $('#addFriendBtn').prop('disabled', false); // Enable the button
            }
        },
        error: function (xhr, status, error) {
            // Handle error
            console.error('Error checking pending friend request:', error);
        }
    });
    
});


 function saveProfileChanges() {
                    var id = @Model.Id; 
                    var picture = document.getElementById('ProfilePictureUrl').value;
 if (picture.trim() === '') {
        // Display error message
        alert('Profile picture cannot be blank.');
        return; // Exit the function
    }

                    // Send AJAX request to update movie details
                    $.ajax({
                        type: 'POST',
                        url: `/Users/Edit/${id}`,
                        data: {
                            Id: id,
                            ProfilePictureUrl: picture
                           
                        },
                        success: function (response) {
                window.location.href = `/me`;
                              
                        },
                        error: function (xhr, status, error) {
                            // Handle error
                            console.error('Error updating User:', error);
                           
                        }
                    });

                    // Close the modal
                    $('#editModal').modal('hide');
                }




function removeFriend(profileId){
    console.log(profileId)
    console.log("Finish Him!!!")
}

function addFriend(profileId) {

    $.ajax({
        type: "POST",
        url: "/FriendRequests/Create", 
        data: {
            RecipientId: profileId 
        },
        success: function (response) {
            console.log("Friend request sent successfully.");
            window.location.reload();
        },
        error: function (xhr, status, error) {
            console.error("Error sending friend request:", error);
            
        }
    });
}


    function deleteFavorite(favoriteId) {
        event.preventDefault();

        fetch(`/Favorites/Delete/${favoriteId}`, {
            method: 'DELETE',
            headers:
            {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + token
            }


        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();

            }).then(data => {
                console.log('Favorite deleted successfully:', data);
                if (data.success) {

                    window.location.href = `/me`;
                } else {
                    console.error('Error deleting favorite:', data.message);
                }
            })
            .catch(error => {
                console.error('Error deleting favorite:', error);
            });

    }
</script>

<style>
    body {
        background-color: #121212;
        color: #fff;
        width: 100%;
    }

    nav.mb-4 {
        padding-top: 10px;
    }

    .card {
        background-color: #4d0000;
        color: #fff;
    }

      .modal-content {
                background-color: #4d0000;

            }
</style>